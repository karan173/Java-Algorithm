/*******************karan*****************************/
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>
#include<math.h>
#include<limits.h>
#include<ctype.h>
#include <queue>
#define S(a,x) scanf("%"#a,&x)  //#a expands to "a" we use this bcoz, arguments are not replaced within quoted strings
#define PS(a,x) printf("%"#a" ",x)  //print with space
#define PN(a,x) printf("%"#a"\n",x)  //print with newline
#define FOR(i,a,b) for( i=a;i<b;i++)
#define FORD(i,a,b) for( i=a;i>=b;i--)
#define REP(i,n) FOR(i,0,n)
#define Max(a, b) ((a>b)?a:b)
#define Min(a, b) ((a>b)?b:a)
//macros for using a char array of lenght n as a char array of length 8n using bit masking
//array must be used for storing flags
#define ISBITSET(x,i) ((x[i>>3] & (1<<(i&7)))!=0)
#define SETBIT(x,i) x[i>>3]|=(1<<(i&7));
#define CLEARBIT(x,i) x[i>>3]&=(1<<(i&7))^0xFF;
#define MAXN 50
#define MAXX 25
#define MAXV 2*MAXN+2
#define INF (INT_MAX>>1)
#define MOD 1000000007
#define TC int t; S(d,t); while(t--)
#define fill(a,v) memset(a,v,sizeof a)     //Works properly only for v = 0 or -1
using namespace std;
int vals[MAXN];
int x[MAXN];
int g[MAXN][MAXX];
int sums[1<<MAXX];
int cost[MAXN][MAXN];
int minDist[MAXV];
int cost2[MAXV][MAXV];
int cap[MAXV][MAXV];
int pot[MAXV];
int bottleNeck[MAXV];
int prev[MAXV];
bool done[MAXV];
int dp[MAXV][MAXV];
int m,n, nv,s,e;

#define gc getchar

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}


int compare(const void *a,const void *b)
{
    int x = *(int *)a;
    int y = *(int *)b;
    if(x<y)
    {
        return -1;
    }
    else if(x>y)
    {
        return 1;
    }
    return 0;
}
void make_sums2(int *a, int lo, int hi, int *s)
{
    int n = hi-lo+1;
    int i,j;
    REP(i, 1<<n)
    {
        int sum = 0;
        REP(j,n)
        {
            if((1<<j)&i) //jth bit on
            {
                sum += a[j+lo];
            }
        }
        s[i] = sum;
    }
}
void make_sums(int *a, int n, int *s)
{
    int ctr = 0;
    int n1 = n/2;
    int n2 = n-n1;
    if(n2==0)
    {
        make_sums2(a,0, n-1, s);
        return;
    }
    int sum1[1<<n1];
    int sum2[1<<n2];
    make_sums2(a, 0, n1-1, sum1);
    make_sums2(a, n1, n-1, sum2);
    int i, j;
    REP(i, 1<<n1)
    {
        REP(j, 1<<n2)
        {
            s[ctr++] = sum1[i]+sum2[j];
        }
    }
}
int select_min()
{
    int minI = -1;
    int i;
    REP(i, nv)
    {
        if(done[i])
            continue;
        if(minI==-1 || minDist[i]<minDist[minI])
            minI = i;
    }
    return minI;
}
int netcost;
int netflow;
void bellmanFord()
{
    int i,j,k;
    REP(i,nv)REP(j,nv) dp[i][j] = cost2[i][j];
    REP(k, nv)REP(i,nv)REP(j,nv)
    {
        dp[i][j] = Min(dp[i][j], dp[i][k]+dp[k][j]);
    }
    REP(i,nv)
    {
        pot[i] = dp[s][i];
    }
}
int mincost()
{
    int i,j;
    bellmanFord();
    netflow = netcost = 0;
    while(true)
    {
        REP(i, nv)
        {
            minDist[i] = INF;
            prev[i] = -1;
            bottleNeck[i] = INF;
            done[i] = false;
        }
        minDist[s] = 0;
        priority_queue<pair<int, int> > pq;
        pq.push(make_pair(0,s));
        while(!pq.empty())
        {
            int u = pq.top().second;
            if(minDist[u]!=pq.top().first)
                continue;
            pq.pop();
            //PN(d,u);
            done[u] = true;
            int v;
            REP(v, nv)
            {
                if(cap[u][v]>0)
                {
                    int reduced_cost = cost2[u][v] + pot[u] - pot[v];
                    if(reduced_cost<0)
                    {
                        printf("error\n");
                        //int z = 1/0;
                    }
                    int newdist = reduced_cost + minDist[u];
                    if(newdist < minDist[v])
                    {
                        minDist[v] = newdist;
                        pq.push(make_pair(newdist, v));
                        prev[v] = u;
                        bottleNeck[v] = Min(bottleNeck[u], cap[u][v]);
                    }
                }
            }
        }
        if(prev[e]==-1)
        {
            return netcost;
        }
        //change potentials
        REP(i, nv)
        {
            if(pot[i]>=INF)
            {
                continue;
            }
            pot[i] += minDist[i];
        }
        int df = bottleNeck[e];
        for(i = e; i!=s; i=prev[i])
        {
            int j = prev[i];
            //edge from j to i
            cap[j][i] -= df;
            cap[i][j] += df;
            netcost += df*cost2[j][i];
        }
    }
}

int mincostMatching()
{
    //make graph
    nv = m+n+2;
    //[0] rows[1...n] cols[n+1...m+n] [m+n+1]
    s = 0, e = m+n+1;
    //connect edges
    int i,j;
    fill(cost2,INT_MAX>>1);
    fill(cap,0);
    REP(i,n)
    {
        REP(j,m)
        {
            int u = i+1, v = j+n+1;
            cost2[u][v] = cost[i][j];
            cap[u][v] = 1;
            cap[v][u] = 0;
            cost2[v][u] = -cost[i][j];
        }
    }
    //connect row to source
    REP(i,n)
    {
        int u = s, v = i+1;
        cost2[u][v] = cost2[v][u] = 0;
        cap[u][v] = 1;
        cap[v][u] = 0;
    }
    //connect cols to sink
    REP(i,m)
    {
        int u = i+n+1, v = e;
        cost2[u][v] = 0;
        cap[u][v] = 1;
        cost2[v][u] = 0;
        cap[v][u] = 0;
    }
    return mincost();
}

int main()
{
    int t;
    scanint(t);
    while(t-->0)
    {
        scanint(m);
        scanint(n);
        int i, j;
        REP(i,m) scanint(vals[i]);
        REP(i,n)
        {
            S(d, x[i]);
            REP(j, x[i])
            {
                scanint(g[i][j]);
            }
            make_sums(g[i], x[i], sums);
            qsort(sums,1<<x[i],sizeof(int),compare);
            REP(j,m)
            {
                if(bsearch(&vals[j], sums, 1<<x[i], sizeof(int), compare))
                {
                    cost[i][j] = -vals[j];
                }
                else
                {
                    cost[i][j] = 0;
                }
            }
        }
        PN(d, -mincostMatching());
    }
    return 0;
}
